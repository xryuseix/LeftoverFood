openapi: "3.0.0"
info:
  title: LeftoverFood Dataset Serve API
  version: "1.0.0"
  description: Alexa website and masked email address, phone number data set
  contact:
    name: xryuseix
    url: https://github.com/xryuseix
  license:
    name: MIT
    url: https://github.com/xryuseix/LeftoverFood/blob/main/LICENSE
servers:
  - url: https://script.google.com

paths:
  /macros/s/{DeployID}/exec:
    get:
      parameters:
        - in: path
          name: DeployID
          required: true
          schema:
            type: string
          description: Google Spreadsheet Deploy ID
          example: AKfycby5Q9l3cAgvOoWRgxR0mCOvGFsrpd-7I4cGAscRFnVwgJLUa445Rj6d6WPMt3tv3vhmow
        - in: query
          name: source
          required: true
          schema:
            type: string
            enum:
              - meta
              - websites
          description: source type (`meta` or `websites`)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MetaResponse'
                  - $ref: '#/components/schemas/WebsiteResponse'
              example:
                status: success
                content:
                  "0*05******2":
                    PHONE_OR_MAIL: PHONE
                    END_CHARS: 1
                    MIDDLE_CHARS: [1, 2]

components:
  schemas:
    MetaResponse:
      type: object
      description: If the `source` query is `meta`
      properties:
        status:
          type: string
          enum:
            - success
            - error
        content:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MetaColumn'
    MetaColumn:
      oneOf:
        - $ref: '#/components/schemas/MetaPhone'
        - $ref: '#/components/schemas/MetaMail'
    MetaPhone:
      type: object
      description: Masked phone number meta information
      properties:
        PHONE_OR_MAIL:
          type: string
          enum:
            - PHONE
        BEGIN_CHARS:
          type: number
          description: 先頭から数えて分かっている文字数(+81や先頭の0を除く)
        END_CHARS:
          type: number
          description: 末尾から数えて分かっている文字数
        MIDDLE_CHARS:
          type: array
          items:
            type: number
          description: 先頭から数えて分かっている文字のインデックスを示す配列(`BEGIN_CHARS`や`END_CHARS`は含まない)
      example:
        PHONE_OR_MAIL: PHONE
        END_CHARS: 1
        MIDDLE_CHARS: [1, 2]
    MetaMail:
      type: object
      description: Masked mail address meta information
      properties:
        PHONE_OR_MAIL:
          type: string
          enum:
            - MAIL
        USER_BEGIN:
          type: number
          description: ユーザ名の先頭から数えて分かっている文字数
        USER_END:
          type: number
          description: ユーザ名の末尾から数えて分かっている文字数
        USER_CHARS:
          type: boolean
          description: ユーザ名の文字数を示すかどうか
        DOMAIN_IS_ALL:
          type: boolean
          description: ドメインが全て分かっているかどうか
        DOMAIN_BEGIN:
          type: number
          description: ドメインの先頭から数えて分かっている文字数
        DOMAIN_DOT:
          type: boolean
          description: ドットがあるかどうか
        DOMAIN_CHARS:
          type: boolean
          description: ドメインの文字数を示すかどうか
      example:
        PHONE_OR_MAIL: MAIL
        USER_BEGIN: 2
        USER_END: null
        USER_CHARS: true
        DOMAIN_IS_ALL: null
        DOMAIN_BEGIN: null
        DOMAIN_DOT: true
        DOMAIN_CHARS: true
    WebsiteResponse:
      type: object
      description: If the `source` query is `website`
      properties:
        status:
          type: string
          enum:
            - success
            - error
        content:
          type: array
          items:
            type: object
            properties:
              domain:
                type: string
              date:
                type: string
              isNotifications:
                type: boolean
              leakedInfo:
                type: array
                items:
                  type: object
                  properties:
                    input:
                      type: string
                      enum:
                        - mail
                        - phone
                        - userName
                        - realName
                    output:
                      type: array
                      items:
                        type: string